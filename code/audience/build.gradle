plugins {
    id 'com.android.library'
    id 'com.diffplug.spotless'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test")
    }.collect { "./" + it.name + "/src/main/java" }
}

jacoco {
    toolVersion = rootProject.ext.jacocoVersion
}

android {
    namespace 'com.adobe.marketing.mobile.audience'

    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk

        testInstrumentationRunner rootProject.ext.testInstrumentationRunner
    }

    flavorDimensions = ["target"]
    productFlavors {
        phone {
            dimension "target"
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}

// Code formatting settings
preBuild.dependsOn spotlessApply

spotless {
    java {
        toggleOffOn("format:off", "format:on")
        target "src/*/java/**/*.java"
        removeUnusedImports()
        prettier(['prettier': '2.7.1', 'prettier-plugin-java': '1.6.2'])
                .config(['parser': 'java', 'tabWidth': 4, 'useTabs': true, 'printWidth': 120])
        endWithNewline()
        licenseHeaderFile "../../config/formatter/adobe.header.txt"
    }
}

// Javadocs settings
afterEvaluate {
    tasks.withType(Javadoc).tap {
        configureEach {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += files(android.libraryVariants.collect { variant ->
                variant.javaCompileProvider.get().classpath.files
            })
            options {
                source = "8"
                links "https://developer.android.com/reference"
            }
        }
    }
}

tasks.register('javadocInternal', Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

tasks.register('javadocPublic', Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

tasks.register('javadocPublish', Jar) {
    from javadocPublic
    archiveClassifier.set('javadoc')
}

// Release and publishing settings
def isReleaseBuild() {
    return hasProperty('release')
}

version = isReleaseBuild() ? moduleVersion : moduleVersion + "-SNAPSHOT"

publishing {
    publications {
        release(MavenPublication) {
            groupId = 'com.adobe.marketing.mobile'
            artifactId = rootProject.moduleName
            version = version
            artifact("$buildDir/outputs/aar/${rootProject.moduleAARName}")
            artifact javadocPublish

            pom {
                name = mavenRepoName
                description = mavenRepoDescription
                url = 'https://developer.adobe.com/client-sdks'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                    }
                }
                developers {
                    developer {
                        id = 'adobe'
                        name = 'adobe'
                        email = 'adobe-mobile-testing@adobe.com'
                    }
                }
                scm {
                    connection = 'scm:git:github.com//adobe/aepsdk-audience-android.git'
                    developerConnection = 'scm:git:ssh://github.com//adobe/aepsdk-audience-android.git'
                    url = 'https://github.com/adobe/aepsdk-audience-android'
                }
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    def coreDependencyNode = dependenciesNode.appendNode('dependency')
                    coreDependencyNode.appendNode('groupId', 'com.adobe.marketing.mobile')
                    coreDependencyNode.appendNode('artifactId', 'core')
                    coreDependencyNode.appendNode('version', mavenCoreVersion)
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"
            url = version.endsWith('SNAPSHOT') ? "https://oss.sonatype.org/content/repositories/snapshots/" : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
}

ext."signing.gnupg.executable" = "gpg"
ext."signing.gnupg.keyName" = System.getenv("GPG_KEY_ID")
ext."signing.gnupg.passphrase" = System.getenv("GPG_PASSPHRASE")

signing {
    useGpgCmd()
    required {
        tasks.withType(PublishToMavenRepository).find {
            gradle.taskGraph.hasTask it
        }
    }
    sign publishing.publications
}

// Jacoco reports

tasks.register('platformUnitTestJacocoReport', JacocoReport) {
    dependsOn "testPhoneDebugUnitTest"
    def excludeRegex = ['**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/phoneDebugUnitTest/testPhoneDebugUnitTest.exec"
    ])

    // Report dir: build/reports/jacoco/platformUnitTestJacocoReport/
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.register('platformFunctionalTestJacocoReport', JacocoReport) {
    dependsOn "createPhoneDebugCoverageReport"
    def excludeRegex = ['**/BuildConfig.class']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/phoneDebug/classes/com/adobe/marketing/mobile", excludes: excludeRegex)

    additionalClassDirs.setFrom files([debugTree])
    additionalSourceDirs.setFrom files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories.setFrom files(android.sourceSets.phone.java.sourceFiles)
    executionData fileTree(dir: "$buildDir", includes: [
            "outputs/code_coverage/phoneDebugAndroidTest/connected/*coverage.ec"
    ])

    // Report dir: build/reports/coverage/androidTest/phone/debug/connected/
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.withType(Test).configureEach {
    testLogging {
        showStandardStreams = true
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation "com.adobe.marketing.mobile:core:${mavenCoreVersion}"
    implementation "androidx.annotation:annotation:${androidxAnnotationVersion}"

    testImplementation "androidx.test.ext:junit:${rootProject.ext.junitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.mockito:mockito-inline:${rootProject.ext.mockitoCoreVersion}"
    testImplementation 'org.json:json:20180813'

    androidTestImplementation 'com.adobe.marketing.mobile:identity:2.0.0'
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext.junitVersion}"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}